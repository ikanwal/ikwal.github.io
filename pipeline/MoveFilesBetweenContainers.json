{
	"name": "MoveFilesBetweenContainers",
	"properties": {
		"description": "Move files from one folder to another folder",
		"activities": [
			{
				"name": "GetFileList",
				"description": "Get the list of file",
				"type": "GetMetadata",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "BinaryDataSource_Folder",
						"type": "DatasetReference",
						"parameters": {
							"Container": {
								"value": "@pipeline().parameters.SourceStore_Location",
								"type": "Expression"
							},
							"Directory": {
								"value": "@pipeline().parameters.SourceStore_Directory",
								"type": "Expression"
							}
						}
					},
					"fieldList": [
						"childItems",
						"itemName"
					],
					"storeSettings": {
						"type": "AzureBlobStorageReadSettings",
						"recursive": true
					},
					"formatSettings": {
						"type": "BinaryReadSettings"
					}
				}
			},
			{
				"name": "ForEachFile",
				"description": "Iterate each file, and move them one by one.",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "FilterFiles",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('FilterFiles').output.value",
						"type": "Expression"
					},
					"batchCount": 20,
					"activities": [
						{
							"name": "Determine to Copy File or not",
							"description": "If File name or file prefix is not sent, TRUE\nIf File name or file prefix is sent And matches the picked file name, TRUE\nOtherwise FALSE",
							"type": "IfCondition",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@or(empty(pipeline().parameters.SourceStore_File), startswith(item().name, pipeline().parameters.SourceStore_File))",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "CopyAFile",
										"description": "Copy a file from the source store to the destination store.",
										"type": "Copy",
										"dependsOn": [],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "BinarySource",
												"storeSettings": {
													"type": "AzureBlobStorageReadSettings",
													"recursive": true,
													"prefix": "",
													"deleteFilesAfterCompletion": false
												},
												"formatSettings": {
													"type": "BinaryReadSettings"
												},
												"recursive": false
											},
											"sink": {
												"type": "BinarySink",
												"storeSettings": {
													"type": "AzureBlobStorageWriteSettings"
												}
											},
											"enableStaging": false,
											"dataIntegrationUnits": 0
										},
										"inputs": [
											{
												"referenceName": "BinaryDataSource_File",
												"type": "DatasetReference",
												"parameters": {
													"Container": {
														"value": "@pipeline().parameters.SourceStore_Location",
														"type": "Expression"
													},
													"Directory": {
														"value": "@pipeline().parameters.SourceStore_Directory",
														"type": "Expression"
													},
													"filename": {
														"value": "@item().name",
														"type": "Expression"
													}
												}
											}
										],
										"outputs": [
											{
												"referenceName": "BinaryDataDestination",
												"type": "DatasetReference",
												"parameters": {
													"Container": {
														"value": "@pipeline().parameters.DestinationStore_Location",
														"type": "Expression"
													},
													"Directory": {
														"value": "@pipeline().parameters.DestinationStore_Directory",
														"type": "Expression"
													},
													"filename": {
														"value": "@item().name",
														"type": "Expression"
													}
												}
											}
										]
									}
								]
							}
						},
						{
							"name": "Whether to Delete File at Source",
							"description": "Nested loop IF Condition is not supported in ADF. So Previous IF condition is Included on top of Delete flag check\n\nIf Delete Flag sent as YES/TRUE in the pipeline parameter and Below conditions pass then TRUE\n(\nIf File name or file prefix is not sent, TRUE\nIf File name or file prefix is sent And matches the picked file name, TRUE\nOtherwise FALSE\n)",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Determine to Copy File or not",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@and(pipeline().parameters.DeleteFileAtSource, or(empty(pipeline().parameters.SourceStore_File), startswith(item().name, pipeline().parameters.SourceStore_File)))",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "DeleteAFileAtSource",
										"description": "Delete a file from the source store",
										"type": "Delete",
										"dependsOn": [],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"dataset": {
												"referenceName": "BinaryDataSource_File",
												"type": "DatasetReference",
												"parameters": {
													"Container": {
														"value": "@pipeline().parameters.SourceStore_Location",
														"type": "Expression"
													},
													"Directory": {
														"value": "@pipeline().parameters.SourceStore_Directory",
														"type": "Expression"
													},
													"filename": {
														"value": "@item().name",
														"type": "Expression"
													}
												}
											},
											"enableLogging": false,
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											}
										}
									}
								]
							}
						}
					]
				}
			},
			{
				"name": "FilterFiles",
				"description": "Only files will be selected, the source-folders will not be selected.",
				"type": "Filter",
				"dependsOn": [
					{
						"activity": "GetFileList",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('GetFileList').output.childItems",
						"type": "Expression"
					},
					"condition": {
						"value": "@equals(item().type, 'File')",
						"type": "Expression"
					}
				}
			}
		],
		"parameters": {
			"SourceStore_Location": {
				"type": "String"
			},
			"SourceStore_Directory": {
				"type": "String"
			},
			"SourceStore_File": {
				"type": "String"
			},
			"DestinationStore_Location": {
				"type": "String"
			},
			"DestinationStore_Directory": {
				"type": "string"
			},
			"DeleteFileAtSource": {
				"type": "bool",
				"defaultValue": false
			}
		},
		"folder": {
			"name": "COMMON"
		},
		"annotations": [],
		"lastPublishTime": "2021-11-02T20:27:36Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}